# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~


# An example controller showing a sample home page
GET           /                                                                                      controllers.HomeController.index

# Project endpoints
GET           /projects                                                                              controllers.ProjectController.getProjects(request : Request)
POST          /projects                                                                              controllers.ProjectController.postProject(request : Request)
GET           /projects/:projectId                                                                   controllers.ProjectController.getProjectById(projectId : java.util.UUID, request : Request)
PUT           /projects/:projectId                                                                   controllers.ProjectController.putProjectById(projectId : java.util.UUID, request : Request)
DELETE        /projects/:projectId                                                                   controllers.ProjectController.deleteProjectById(projectId : java.util.UUID, request : Request)

# Branch endpoints
GET           /projects/:projectId/branches                                                          controllers.BranchController.getBranchesByProject(projectId : java.util.UUID, request : Request)
POST          /projects/:projectId/branches                                                          controllers.BranchController.postBranchByProject(projectId : java.util.UUID, request : Request)
GET           /projects/:projectId/branches/:branchId                                                controllers.BranchController.getBranchByProjectAndId(projectId : java.util.UUID, branchId : java.util.UUID, request : Request)
DELETE        /projects/:projectId/branches/:branchId                                                controllers.BranchController.deleteBranchByProjectAndId(projectId : java.util.UUID, branchId : java.util.UUID, request : Request)

# Tag endpoints
GET           /projects/:projectId/tags                                                              controllers.TagController.getTagsByProject(projectId : java.util.UUID, request : Request)
POST          /projects/:projectId/tags                                                              controllers.TagController.postTagByProject(projectId : java.util.UUID, request : Request)
GET           /projects/:projectId/tags/:tagId                                                       controllers.TagController.getTagByProjectAndId(projectId : java.util.UUID, tagId : java.util.UUID, request : Request)
DELETE        /projects/:projectId/tags/:tagId                                                       controllers.TagController.deleteTagByProjectAndId(projectId : java.util.UUID, tagId : java.util.UUID, request : Request)

# Commit endpoints
GET           /projects/:projectId/commits                                                           controllers.CommitController.getCommitsByProject(projectId : java.util.UUID, request : Request)
POST          /projects/:projectId/commits                                                           controllers.CommitController.postCommitByProject(projectId : java.util.UUID, branchId : java.util.Optional[java.util.UUID], request : Request)
GET           /projects/:projectId/commits/:commitId                                                 controllers.CommitController.getCommitByProjectAndId(projectId : java.util.UUID, commitId : java.util.UUID, request : Request)
GET           /projects/:projectId/commits/:commitId/changes                                         controllers.CommitController.getChangesByProjectAndCommit(projectId : java.util.UUID, commitId : java.util.UUID, request : Request)
GET           /projects/:projectId/commits/:commitId/changes/:changeId                               controllers.CommitController.getChangeByProjectCommitAndId(projectId : java.util.UUID, commitId : java.util.UUID, changeId : java.util.UUID, request : Request)

# Element endpoints
GET           /projects/:projectId/commits/:commitId/elements                                        controllers.ElementController.getElementsByProjectIdCommitId(projectId : java.util.UUID, commitId : java.util.UUID, excludeUsed : java.util.Optional[java.lang.Boolean], request : Request)
GET           /projects/:projectId/commits/:commitId/elements/:elementId                             controllers.ElementController.getElementByProjectIdCommitIdElementId(projectId : java.util.UUID, commitId : java.util.UUID, elementId : java.util.UUID, excludeUsed : java.util.Optional[java.lang.Boolean], request : Request)
GET           /projects/:projectId/commits/:commitId/elements/:elementId/projectUsage                controllers.ElementController.getProjectUsageByProjectIdCommitIdElementId(projectId : java.util.UUID, commitId : java.util.UUID, elementId : java.util.UUID, request : Request)
GET           /projects/:projectId/commits/:commitId/roots                                           controllers.ElementController.getRootsByProjectIdCommitId(projectId : java.util.UUID, commitId : java.util.UUID, excludeUsed : java.util.Optional[java.lang.Boolean], request : Request)

# Relationship endpoints
GET           /projects/:projectId/commits/:commitId/elements/:relatedElementId/relationships        controllers.RelationshipController.getRelationshipsByProjectIdCommitIdRelatedElementId(projectId : java.util.UUID, commitId : java.util.UUID, relatedElementId : java.util.UUID, direction : java.util.Optional[String], excludeUsed : java.util.Optional[java.lang.Boolean], request : Request)

# Query endpoints
GET           /projects/:projectId/queries                                                           controllers.QueryController.getQueriesByProject(projectId : java.util.UUID, request : Request)
POST          /projects/:projectId/queries                                                           controllers.QueryController.postQueryByProject(projectId : java.util.UUID, request : Request)
GET           /projects/:projectId/queries/:queryId                                                  controllers.QueryController.getQueryByProjectAndId(projectId : java.util.UUID, queryId : java.util.UUID)
DELETE        /projects/:projectId/queries/:queryId                                                  controllers.QueryController.deleteQueryByProjectAndId(projectId : java.util.UUID, queryId : java.util.UUID)
GET           /projects/:projectId/queries/:queryId/results                                          controllers.QueryController.getQueryResultsByProjectIdQueryId(projectId : java.util.UUID, queryId : java.util.UUID, commitId : java.util.Optional[java.util.UUID], request : Request)
GET           /projects/:projectId/query-results                                                     controllers.QueryController.getQueryResultsByProjectIdQuery(projectId : java.util.UUID, commitId : java.util.Optional[java.util.UUID], request : Request)
POST          /projects/:projectId/query-results                                                     controllers.QueryController.getQueryResultsByProjectIdQuery(projectId : java.util.UUID, commitId : java.util.Optional[java.util.UUID], request : Request)

# Meta endpoints
GET           /meta/datatypes                                                                        controllers.SchemaController.getSchemas(request : Request)
GET           /meta/datatypes/:datatypeId                                                            controllers.SchemaController.getSchemaById(datatypeId : String)

# Extension endpoints
POST          /x/named/projects/:projectId/commits                                                   controllers.CommitController.postCommitByProjectNameResolved(projectId : java.util.UUID, branchId : java.util.Optional[java.util.UUID], request : Request)
GET           /x/named/projects/:projectId/commits/:commitId/elements/:qualifiedName                 controllers.ElementController.getElementByProjectIdCommitIdQualifiedName(projectId : java.util.UUID, commitId : java.util.UUID, qualifiedName : String, request : Request)

# Map static resources from the /public folder to the /assets URL path
GET           /assets/*file                                                                          controllers.Assets.versioned(path="/public", file: Asset)

GET           /docs/                                                                                 controllers.Assets.at(path="/public/docs", file="index.html")
GET           /docs/*file                                                                            controllers.Assets.at(path="/public/docs", file)
GET           /jsonld/*file                                                                          controllers.Assets.at(path="/public/jsonld", file)